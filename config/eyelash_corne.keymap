#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> 

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
// custom helpers
#include "zmk-helpers/helper.h"
#include "eyelash_corne/keymap.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/currency.dtsi"


#define BASE 0
#define SYM 1
#define NUM 2
#define SYSTEM  3  
#define GAME  4  

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2   // thumbs

#define QUICK_TAP_MS 175

ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <150>;)
ZMK_COMBO(copy_cut, &copy_cut,   LB2 LB3, ALL)  // copy on tap, cut on double-tap, active on all layers
ZMK_COMBO(paste,    &kp LC(V), LB1 LB2, ALL)
ZMK_COMBO(undo ,    &kp LC(Z), LB4 LB3, ALL)
ZMK_COMBO(redo ,    &kp LC(LS(Z)), LB4 LB1, ALL)
ZMK_COMBO(escape ,  &kp ESC, LT5 LT4, ALL)

ZMK_TAP_DANCE(layerdance, bindings = <&tog 4>, <&tog 5>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(desk1, bindings = <&kp LG(N1)>, <&kp LG(LS(N1))>;
              tapping-term-ms = <200>;)
ZMK_TAP_DANCE(desk2, bindings = <&kp LG(N2)>, <&kp LG(LS(N2))>;
              tapping-term-ms = <200>;)
ZMK_TAP_DANCE(desk3, bindings = <&kp LG(N3)>, <&kp LG(LS(N3))>;
              tapping-term-ms = <200>;)
ZMK_TAP_DANCE(desk4, bindings = <&kp LG(N4)>, <&kp LG(LS(N4))>;
              tapping-term-ms = <200>;)
ZMK_TAP_DANCE(desk5, bindings = <&kp LG(N5)>, <&kp LG(LS(N5))>;
              tapping-term-ms = <200>;)


ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <QUICK_TAP_MS>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <QUICK_TAP_MS>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <SYM NUM>;
            then-layer = <SYSTEM>;
        };
    };
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };


    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <RM1 RM2>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <27 33>;
        };

        goequal {
            bindings = <&goequal>;
            key-positions = <LM1 LM2>;
        };

        saveandquit {
            bindings = <&savequit>;
            key-positions = <LT3 LT4>;
        };
    };

    macros {
        goequal: goequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUAL";
        };

        savequit: savequit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp Q>;
            label = "SAVEQUIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp TAB    &kp Q           &kp W         &kp E         &kp R         &kp T                              &kp UP                &kp Y        &kp U            &kp I          &kp O          &kp P           &kp BSPC
&td0       &hml LGUI A     &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &hmr RSHFT J     &hmr LCTRL K   &hmr LALT L    &hmr LGUI SEMI  &kp SQT
&kp LCTRL  &kp Z           &kp X         &kp C         &kp V         &kp B       &kp C_MUTE             &kp DOWN              &kp N        &kp M            &kp COMMA      &kp DOT        &kp FSLH        &to 4
                                         &kp LGUI       &mo SYM        &kp SPACE                                              &kp ENTER    SMART_NUM  &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        sym_layer {
            display-name = "Symbols";
            bindings = < 
&kp ESC           &kp EXCL               &kp AT           &kp POUND         &kp DOLLAR   &kp PERCENT                            &mmv MOVE_UP                       &kp CARET  &kp AMPERSAND  &kp ASTRK     &kp SLASH          &kp BACKSLASH    &kp DEL
&kp LESS_THAN     &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp DOT     &kp COLON              &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT         &kp UNDER  &kp PIPE       &kp EQUAL     &kp SINGLE_QUOTE   &kp GRAVE        &kp PG_UP
&kp GREATER_THAN  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp COMMA   &kp SEMI &kp C_MUTE                    &mmv MOVE_DOWN                     &kp MINUS  &kp PLUS       &kp QUESTION  &kp DOUBLE_QUOTES  &kp TILDE        &trans
                                         &trans        &trans        &trans                                                                                        &kp INS    &kp DEL        &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        num_layer {
            display-name = "Num";
            bindings = <
&trans  &trans  &trans  &trans &trans &trans                                 &mmv MOVE_UP               &desk1  &desk2   &desk3   &desk4   &desk5 &kp BSPC
&trans  &kp N1  &kp N2  &kp N3 &kp N4 &kp N5                 &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT &kp N6  &kp N7   &kp N8   &kp N9   &kp N0 &kp DEL
&trans  &trans  &trans  &trans &trans &trans  &kp C_MUTE                     &mmv MOVE_DOWN             &trans  &trans  &trans  &trans &trans &trans 
                        &trans &trans &trans                                                            &kp RET &trans   &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        system_layer {
            display-name = "System";
            bindings = <
&studio_unlock      &kp F1      &kp F2      &kp F3       &kp F4     &kp F5                                               &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10         &kp F11
&bt BT_CLR_ALL     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&ext_power EP_TOG  &sys_reset  &trans      &bootloader  &out OUT_USB  &out OUT_BLE  &kp C_MUTE                          &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                &trans      &trans      &trans                                                                   &trans       &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        game_layer {
            display-name = "Game";
            bindings = <
&kp TAB    &kp Q           &kp W         &kp E         &kp R         &kp T                              &kp UP                &kp Y        &kp U            &kp I          &kp O          &kp P           &kp BSPC
&td0       &kp A           &kp S         &kp D         &kp F         &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT    &kp H        &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
&kp LCTRL  &kp Z           &kp X         &kp C         &kp V         &kp B       &kp C_MUTE             &kp DOWN              &kp N        &kp M            &kp COMMA      &kp DOT        &kp FSLH        &to 0
                                         &kp LGUI       &mo SYM        &kp SPACE                                              &kp ENTER  &mo NUM  &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
